---
// src/layouts/PostLayout.astro
/**
 * Layout for blog posts and other "article" content types
 * css: src/styles/pages/post-layout.css
 */

import BaseLayout from './BaseLayout.astro';
import { siteDefaults } from '@/config/siteDefaults';
import { siteImages } from '@/config/siteImages';
import type { HeadProps } from '@/types/HeadProps';
import { getEntry } from 'astro:content';
import TableOfContents from '@/components/TableOfContents.astro';
import ResponsiveImage from '@/components/ResponsiveImage.astro';
import Breadcrumb from '@/components/ui/Breadcrumb.astro';
import RelatedPostsList from '@/components/ui/RelatedPostsList.astro';

import ShareLink from '@/components/ShareLink.astro';
import Anchor from '@/components/ui/Anchor.astro';
import Button from '@/components/ui/Button.astro';
import FaqList from '@/components/ui/FaqList.astro';
import TagList from '@/components/ui/TagList.astro';
import PrevNextNav from '@/components/ui/PrevNextNav.astro';
import Sidebar from '@/components/ui/Sidebar.astro';

import { getImage, constructUrl, getImageMeta } from '@/utils/getImage';
import { parseImageDims } from '@/utils/imageHelpers';
import { machineAndHuman } from '@/utils/date-format';
import CssFilesToLoad from '@/components/CssFilesToLoad.astro';

interface Props {
  title?: string;
  description?: string;
  slug?: string;
  canonicalUrl?: string;
  index?: boolean;
  type?: string; // e.g. "blog" or "service"
  publishedDate?: string;
  lastModified?: string | null;
  authors?: { id: string }[];
  tags?: string[];
  categories?: string[];
  keywords?: string[];
  featured?: boolean;
  draft?: boolean;
  faq?: { question: string; answer: string; speakable: boolean }[];
  collection?: string;
  collectionBase?: string; // e.g. "services/"
  heroImage?: string;
  heroImageAlt?: string;
  heroImageTitle?: string;
  heroImageCaption?: string;
  toc?: { id: string; text: string; level: number }[];
  allPosts?: any[]; // entries from getCollection()
  relatedPosts?: { title: string; url: string }[];
  serviceOffers?: Array<{
    name?: string;    
    priceKey: string; // pricing key from src/config/pricing.ts
    buyNowLink?: string; // optional buy now / CTA link
  }>;
}

const {
  title,
  description,
  slug,
  canonicalUrl,
  index = true,
  featured = false,
  type = 'article',
  publishedDate,
  lastModified,
  authors = [],
  tags = [],
  categories = [],
  keywords = [],
  collection = '',
  collectionBase = '',
  heroImage,
  heroImageAlt,
  heroImageTitle,
  heroImageCaption,
  faq = [],
  toc = [],
  allPosts = [],
  relatedPosts = [],
  serviceOffers

} = Astro.props as Props;

// Canonical: falls back to siteUrl + collectionBase + slug
const fullCanonical =
  canonicalUrl ||
  `${siteDefaults.siteUrl}${collectionBase ?? ''}${slug ?? ''}/`;

// ---- prev/next resolution (use data.slug OR entry id) ----
const currentIndex = allPosts.findIndex(
  (p) => (p.data?.slug || p.id) === slug
);
const prevItem = currentIndex > 0 ? allPosts[currentIndex - 1] : null;
const nextItem =
  currentIndex >= 0 && currentIndex < allPosts.length - 1
    ? allPosts[currentIndex + 1]
    : null;

// ---- authors resolved from team collection ----
const resolvedAuthors = await Promise.all(
  authors.map(async ({ id }) => {
    try {
      const entry = await getEntry('team', id);
      return entry
        ? {
            id,
            slug: entry.data.slug,
            url: `/team/${entry.data.slug}/`,
            name: entry.data.name ?? id,
            data: entry.data
          }
        : null;
    } catch {
      return null;
    }
  })
).then((xs) => xs.filter(Boolean));

// ---- hero image info ----
const imageSrc = heroImage ?? siteImages.image;
const heroImageMeta = getImageMeta(imageSrc);
const heroImageUrlRaw =
  heroImageMeta && typeof heroImageMeta === 'object'
    ? constructUrl(heroImageMeta, 'full')
    : '';
const heroImageUrl = Array.isArray(heroImageUrlRaw)
  ? heroImageUrlRaw[0]
  : heroImageUrlRaw;
const imageInfo =
  typeof heroImageUrl === 'string' ? parseImageDims(heroImageUrl) : undefined;

// ---- dates for head ----
const { iso: publishedAtISO, human: publishedAtHuman } = machineAndHuman(
  publishedDate,
  'now'
);
const { iso: lastModifiedISO, human: lastModifiedHuman } = machineAndHuman(
  lastModified ?? publishedDate,
  'now'
);

const sameDay =
  publishedAtISO && lastModifiedISO
    ? publishedAtISO.slice(0, 10) === lastModifiedISO.slice(0, 10)
    : false;


/** optional bits for publisher/logo */

  
const headProps: HeadProps = {
  title: `${title}`,
  description,
  image: heroImageUrl,
  imageWidth: imageInfo?.width,
  imageHeight: imageInfo?.height,
  imageAlt:
    heroImageAlt || (title ? `hero image of ${title}` : '') || siteImages.imageAlt || 'Site featured image',
  type: type === 'service' ? 'service' : 'article',
  canonicalUrl: fullCanonical,
  index,
  keywords: tags?.length ? tags : keywords, // prefer tags if present
  publishedAt: publishedAtHuman,
  publishedAtISO,
  updatedAt: lastModifiedHuman,
  updatedAtISO: lastModifiedISO,
  authors: resolvedAuthors as any,
  showBreadcrumb: true,
  breadcrumbs: [],
};
---

<BaseLayout headProps={headProps}>
  <Fragment slot="headContent-top">
    <CssFilesToLoad
        files={[
          { name: "post-layout", inline: true}
        ]}
      /> 
  </Fragment>
  <Fragment slot="headContent-bottom">
    {/* rel=prev/next help crawlers understand pagination/series */}
   <meta name="heroimage" content={heroImageUrl || ''} />
    {prevItem && (
      <link
        rel="prev"
        href={`/${collectionBase}${prevItem.data?.slug || prevItem.id}/`}
      />
    )}
    {nextItem && (
      <link
        rel="next"
        href={`/${collectionBase}${nextItem.data?.slug || nextItem.id}/`}
      />
    )}
  </Fragment>

  <article id="post-layout" class="post-layout w-100p gap jc-center" itemscope
  itemtype="https://schema.org/Article">
    {/* Header */}
    <header class="post-header bg-primary-darker col-base-00 mn-h-230 mx-h-320 h-fit py-2">
      { /* Breadcrumb */ }
      <Breadcrumb showBreadcrumb={headProps.showBreadcrumb} title={title} breadcrumbs={headProps.breadcrumbs} />
      <div id="post-header-content" class="max-w-featured mi-auto ta-center my-2 p-1">
        <h1 class="post-title">{title}</h1>
        {description && <p class="post-desc">{description}</p>}

        <div class="post-meta text-s my-1">
          {resolvedAuthors.length > 0 && (
            <div class="post-authors">
              ✍️ By{' '}
              {resolvedAuthors.map((a, i) => {
                const isLast = i === resolvedAuthors.length - 1;
                const isSecondLast = i === resolvedAuthors.length - 2;
                return (
                  <>
                    <a href={a!.url} class="author-link td-underline">{a!.name}</a>
                    {!isLast &&
                      (resolvedAuthors.length === 2
                        ? ' and '
                        : isSecondLast
                        ? ', and '
                        : ', ')}
                  </>
                );
              })}
            </div>
          )}

          {(publishedDate || lastModified) && (
            <div class="post-dates text-s">
              {publishedDate && (
                <time datetime={publishedAtISO}>📅 on {publishedAtHuman}</time>
              )}
              {lastModified && (
                <span class="last-updated-on"> • Updated: {lastModifiedHuman}</span>
              )}
            </div>
          )}
        </div>
      </div>
    </header>
    {/* Hero Image */}
    {heroImage && heroImageMeta && typeof heroImageMeta === 'object' ? (
      <ResponsiveImage
        src={heroImage}
        imageMeta={heroImageMeta}
        alt={heroImageAlt || ''}
        title={heroImageTitle || ''}
        caption={heroImageCaption || ''}
        width="960"
        id="hero-image"
        loading="eager"
        className="hero-image max-w-95p w-90p lg-max-w-featured lg-w-100p full-max-w-featured full-w-100p mi-auto mt-0-5"
        variant="desktop"
        addSchema={true}
      />
    ) : heroImage ? (
      <ResponsiveImage
        src={heroImage}
        alt={heroImageAlt || ''}
        title={heroImageTitle || ''}
        caption={heroImageCaption || ''}
        width="960"
        id="hero-image"
        loading="eager"
        className="hero-image max-w-95p w-90p lg-max-w-featured lg-w-100p full-max-w-featured full-w-100p mi-auto mt-0-5"
        variant="desktop"
        addSchema={true}
      />
    ) : null}

    {/* Left Sidebar with ToC */}
    <Sidebar variant="left">
      <TableOfContents
        toc={toc}
        heading="On This Page"
        depth="h2,h3"
        className="toc bg br"
      />
    </Sidebar>

    {/* Content */}
    <div class="post-content max-w-content mi-auto my-05 p-1 bg br-primary-light br" itemprop="articleBody">
      <slot />
    </div>

    {/* Right Sidebar (currently empty, but keep the region) */}
    <Sidebar variant="right">
      <RelatedPostsList items={relatedPosts} />
    </Sidebar>
    <footer id="post-footer" class="post-footer max-w-content w-100p mi-auto my-05 p-05">
      <ShareLink id="blog-footer-share-links" className="" title="share" />

      {Array.isArray(faq) && faq.length > 0 && (
        <FaqList
          items={faq}
          id="faq"
          class="post-faq my-05 p-05"
          heading="Frequently Asked Questions"
          headingTag="h2"
          openAll={true}
          addSchema={true}
          addSpeakableSchema={true}
          htmlAnswers={false}
        />
      )}

      {Array.isArray(tags) && tags.length > 0 && (
        <TagList
          items={tags}
          heading="Keywords"
          baseHref="/tags/"
          dedupe={true}
          sort="asc"
        />
      )}
    </footer>    
  </article>
  {(prevItem || nextItem) && (
      <PrevNextNav
        prevItem={prevItem}
        nextItem={nextItem}
        collectionBase={collectionBase}
        prevVariant="secondary"
        nextVariant="secondary"      
      />
    )}

  <Fragment slot="extraScripts" />
</BaseLayout>
