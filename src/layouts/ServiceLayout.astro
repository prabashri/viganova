---
// src/layouts/ServiceLayout.astro
/**
 * Layout for "Service" pages (schema: Service)
 */

import BaseLayout from './BaseLayout.astro';
import { siteDefaults } from '@/config/siteDefaults';
import { siteImages } from '@/config/siteImages';
import type { HeadProps } from '@/types/HeadProps';
import { getEntry } from 'astro:content';
import TableOfContents from '@/components/TableOfContents.astro';
import ResponsiveImage from '@/components/ResponsiveImage.astro';
import Breadcrumb from '@/components/ui/Breadcrumb.astro';
import RelatedPostsList from '@/components/ui/RelatedPostsList.astro';
import ShareLink from '@/components/ShareLink.astro';
import FaqList from '@/components/ui/FaqList.astro';
import TagList from '@/components/ui/TagList.astro';
import PrevNextNav from '@/components/ui/PrevNextNav.astro';
import Sidebar from '@/components/ui/Sidebar.astro';
import FilesToLoadCSS from '@/components/FilesToLoadCSS.astro';

import { getImageMeta, constructUrl } from '@/utils/getImage';
import { parseImageDims } from '@/utils/imageHelpers';
import { machineAndHuman } from '@/utils/date-format';

/* ⬇️ pricing utilities */
import {
  PRICES_LAST_UPDATED,
  priceInfo,
  inr,
  type PriceKey,
} from '@/config/pricing';

interface OfferInput {
  name?: string;        // optional frontmatter display override
  priceKey: PriceKey;   // resolve everything by this key
}
interface Props {
  title?: string;
  description?: string;
  slug?: string;
  canonicalUrl?: string;
  index?: boolean;
  type?: string;
  publishedDate?: string;
  lastModified?: string | null;
  authors?: { id: string }[];
  tags?: string[];
  categories?: string[];
  keywords?: string[];
  featured?: boolean;
  draft?: boolean;
  faq?: { question: string; answer: string; speakable: boolean }[];
  collection?: string;
  collectionBase?: string;
  heroImage?: string;
  heroImageAlt?: string;
  heroImageTitle?: string;
  heroImageCaption?: string;
  toc?: { id: string; text: string; level: number }[];
  allPosts?: any[];
  relatedPosts?: { title: string; url: string }[];
  serviceOffers?: OfferInput[];   // ⬅️ only priceKey + (optional) name come in
}

const props = Astro.props as Props;

const {
  title,
  description,
  slug,
  canonicalUrl,
  index = true,
  featured = false,
  type = 'service',
  publishedDate,
  lastModified,
  authors = [],
  tags = [],
  categories = [],
  keywords = [],
  collection = '',
  collectionBase = '',
  heroImage,
  heroImageAlt,
  heroImageTitle,
  heroImageCaption,
  faq = [],
  toc = [],
  allPosts = [],
  relatedPosts = [],
  serviceOffers = [],
} = props;

// Canonical
const fullCanonical =
  canonicalUrl || `${siteDefaults.siteUrl}${collectionBase ?? ''}${slug ?? ''}/`;

// Prev/next
const currentIndex = allPosts.findIndex((p) => (p.data?.slug || p.id) === slug);
const prevItem = currentIndex > 0 ? allPosts[currentIndex - 1] : null;
const nextItem =
  currentIndex >= 0 && currentIndex < allPosts.length - 1
    ? allPosts[currentIndex + 1]
    : null;

// Authors (resolve)
const resolvedAuthors = await Promise.all(
  authors.map(async ({ id }) => {
    try {
      const entry = await getEntry('team', id);
      return entry ? {
        id,
        slug: entry.data.slug,
        url: `/team/${entry.data.slug}/`,
        name: entry.data.name ?? id,
        data: entry.data
      } : null;
    } catch { return null; }
  })
).then(xs => xs.filter(Boolean));

// Hero image
const heroImageMeta = heroImage ? getImageMeta(heroImage) : undefined;
const heroImageUrlRaw =
  heroImageMeta && typeof heroImageMeta === 'object'
    ? constructUrl(heroImageMeta, 'full')
    : '';
const heroImageUrl = Array.isArray(heroImageUrlRaw) ? heroImageUrlRaw[0] : heroImageUrlRaw;
const imageInfo = typeof heroImageUrl === 'string' ? parseImageDims(heroImageUrl) : undefined;

// Dates for head
const { iso: publishedAtISO, human: publishedAtHuman } = machineAndHuman(publishedDate, 'now');
const { iso: lastModifiedISO, human: lastModifiedHuman } = machineAndHuman(lastModified ?? publishedDate, 'now');

/* ⬇️ Resolve frontmatter offers → display-ready offers */
type ResolvedOffer = {
  key: PriceKey;
  name: string;
  amount: number;
  currency: 'INR';
  buyNowLink?: string;
};
const resolvedOffers: ResolvedOffer[] = Array.isArray(serviceOffers)
  ? serviceOffers.flatMap((o) => {
      try {
        const p = priceInfo(o.priceKey);
        return [{
          key: o.priceKey,
          name: o.name ?? p.name,
          amount: p.amount,
          currency: p.currency,
          buyNowLink: p.buyNowLink,
        }];
      } catch (e) {
        // Unknown priceKey—skip silently in prod, warn in dev
        if (import.meta.env.DEV) console.warn(`[ServiceLayout] Unknown priceKey: ${o?.priceKey}`);
        return [];
      }
    })
  : [];

// Head props (pass through the raw frontmatter offers for head/schema if you like)
const headProps: HeadProps = {
  title: `${title}`,
  description,
  image: heroImageUrl,
  imageWidth: imageInfo?.width,
  imageHeight: imageInfo?.height,
  imageAlt: heroImageAlt || (title ? `hero image of ${title}` : '') || siteImages.imageAlt || 'Site featured image',
  type: 'service',
  canonicalUrl: fullCanonical,
  index,
  keywords: tags?.length ? tags : keywords,
  publishedAt: publishedAtHuman,
  publishedAtISO,
  updatedAt: lastModifiedHuman,
  updatedAtISO: lastModifiedISO,
  authors: resolvedAuthors as any,
  showBreadcrumb: true,
  breadcrumbs: [],
  // Optional: if your BaseLayout/Schema consumes offers, you can pass resolvedOffers too.
  serviceOffers: serviceOffers,
};
---

<BaseLayout headProps={headProps}>
  <Fragment slot="headContent-top">
    <FilesToLoadCSS files={[{ name: "post-layout", inline: true }]} />
  </Fragment>

  <Fragment slot="headContent-bottom">
    <meta name="heroimage" content={heroImageUrl || ''} />
    {prevItem && (
      <link rel="prev" href={`/${collectionBase}${prevItem.data?.slug || prevItem.id}/`} />
    )}
    {nextItem && (
      <link rel="next" href={`/${collectionBase}${nextItem.data?.slug || nextItem.id}/`} />
    )}
  </Fragment>

  <article id="post-layout" class="post-layout w-100p gap jc-center ji-center"
    itemscope itemtype="https://schema.org/Service">
    {/* Header */}
    <header class="post-header w-100p bg-primary-darker col-base-00 mn-h-230 mx-h-320 h-fit py-2">
      <Breadcrumb showBreadcrumb={headProps.showBreadcrumb} title={title} breadcrumbs={headProps.breadcrumbs} />
      <div id="post-header-content" class="max-w-featured mx-auto ta-center my-2 p-1">
        <h1 class="post-title" itemprop="name">{title}</h1>
        {description && <p class="post-desc" itemprop="description">{description}</p>}
      </div>
    </header>

    {/* Optional hero */}
    {heroImage && heroImageMeta && typeof heroImageMeta === 'object' ? (
      <ResponsiveImage
        src={heroImage}
        imageMeta={heroImageMeta}
        alt={heroImageAlt || ''}
        title={heroImageTitle || ''}
        caption={heroImageCaption || ''}
        width="960"
        id="hero-image"
        loading="eager"
        className="hero-image max-w-95p w-90p lg-max-w-featured lg-w-100p full-max-w-featured full-w-100p mx-auto mt-0-5"
        variant="desktop"
        addSchema={true}
      />
    ) : heroImage ? (
      <ResponsiveImage
        src={heroImage}
        alt={heroImageAlt || ''}
        title={heroImageTitle || ''}
        caption={heroImageCaption || ''}
        width="960"
        id="hero-image"
        loading="eager"
        className="hero-image max-w-95p w-90p lg-max-w-featured lg-w-100p full-max-w-featured full-w-100p mx-auto mt-0-5"
        variant="desktop"
        addSchema={true}
      />
    ) : null}

    {/* Left Sidebar (ToC) */}
    <Sidebar variant="left">
      <TableOfContents toc={toc} heading="On This Page" depth="h2,h3" className="toc bg br" />
    </Sidebar>

    {/* Main content */}
    <div class="post-content max-w-content mx-auto my-05 p-1 bg br-primary-light br" itemprop="description">
      <slot />
    </div>

    {/* Right Sidebar */}
    <Sidebar variant="right">
      {/* Offers (resolved from priceKey) */}
      {resolvedOffers.length > 0 && (
        <section class="service-offers max-w-content mx-auto my-05 p-1 br"
                itemprop="hasOfferCatalog"
                itemscope
                itemtype="https://schema.org/OfferCatalog">
          <meta itemprop="name" content="Service Packages" />
          
          <h2 class="text-xl m-0">Service Packages</h2>        

          <ul class="my-05">
            {resolvedOffers.map((o) => (
              <li class="my-03"
                  itemprop="itemListElement"
                  itemscope
                  itemtype="https://schema.org/Offer">
                <meta itemprop="priceCurrency" content={o.currency} />
                <span class="block">
                  <strong itemprop="name">{o.name}</strong>
                </span>
                <span class="block text-s">
                  <meta itemprop="price" content={String(o.amount)} />
                  <span itemprop="price">{inr(o.amount)}</span>
                  <span class="col-base-60"> · key: {o.key}</span>
                </span>
              </li>
            ))}
          </ul>
          <small class="col-base-70">Prices updated: {PRICES_LAST_UPDATED}</small>
        </section>
      )}
      <RelatedPostsList items={relatedPosts} />
    </Sidebar>

    <footer id="post-footer" class="post-footer max-w-content w-100p mx-auto my-05 p-05">
      <ShareLink id="blog-footer-share-links" className="" title="share" />

      {Array.isArray(faq) && faq.length > 0 && (
        <FaqList
          items={faq}
          id="faq"
          class="post-faq my-05 p-05"
          heading="Frequently Asked Questions"
          headingTag="h2"
          openAll={true}
          addSchema={true}
          addSpeakableSchema={true}
          htmlAnswers={false}
        />
      )}

      {Array.isArray(tags) && tags.length > 0 && (
        <TagList items={tags} heading="Keywords" baseHref="/tags/" dedupe={true} sort="asc" />
      )}
    </footer>
  </article>

  {(prevItem || nextItem) && (
    <PrevNextNav
      prevItem={prevItem}
      nextItem={nextItem}
      collectionBase={collectionBase}
      prevVariant="secondary"
      nextVariant="secondary"
    />
  )}

  <Fragment slot="extraScripts" />
</BaseLayout>
