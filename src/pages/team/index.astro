---
// src/pages/team/index.astro
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { siteDefaults } from '../../config/siteDefaults';
import { Icon } from 'astro-icon/components';
import gravatarHashesJson from '../../data/email-hash.json';
import type { HeadProps } from '../../types/HeadProps';
import HeroCollections from '../../components/ui/HeroCollections.astro';
import { siteImages } from '@/config/siteImages';
import FilesToLoadCSS from '@/components/FilesToLoadCSS.astro';

const gravatarHashes: Record<string, string> = Object.fromEntries(
  Object.entries(gravatarHashesJson).map(([slug, obj]) => [slug, obj.sha256])
);

const nonce = (Astro.locals as any).nonce;

const allMembers = await getCollection('team');

// Filter + sort
const team = allMembers
  .filter(member => 
    !member.data.left &&
    !member.data.slug.startsWith('_') // Exclude hidden members
  )
  .sort((a, b) => {
    const aDate = a.data.joined ? new Date(a.data.joined).valueOf() : 0;
    const bDate = b.data.joined ? new Date(b.data.joined).valueOf() : 0;
    return bDate - aDate;
  });


const featured = team.filter(member => member.data.featured);
const others = team.filter(member => !member.data.featured);

// Color palette
const colorPalette = [
  'avatar-color-green',
  'avatar-color-pink',
  'avatar-color-blue',
  'avatar-color-purple',
  'avatar-color-teal'
];
let colorIndex = 0;

// Avatar helper
function getAvatar({ slug, image, useImage, useInitial, initialText, useGravatar, color }: any) {
  if (useImage && image) return { type: 'img', src: image };
  if (useInitial && initialText) {
    const { className, dataColor } = getAvatarColor(color);
    return { type: 'initial', text: initialText, colorClass: className, dataColor };
  }
  if (useGravatar && gravatarHashes[slug]) return { type: 'gravatar', src: `https://www.gravatar.com/avatar/${gravatarHashes[slug]}?s=300&d=identicon` };
  const { className, dataColor } = getAvatarColor(color);
  return { type: 'icon', colorClass: className, dataColor };
}

// Resolve color class or data-color
function getAvatarColor(color?: string) {
  // No color provided → auto-assign from palette
  if (!color) {
    const assigned = colorPalette[colorIndex % colorPalette.length];
    colorIndex++;
    return { className: assigned, dataColor: null };
  }

  // Already matches theme color classes
  if (color.startsWith('avatar-color-')) {
    return { className: color, dataColor: null };
  }

  // Custom HEX or HSL → class becomes `avatar-color-custom`
  if (/^#([0-9A-F]{3,8})$/i.test(color) || color.startsWith('hsl')) {
    return { className: 'avatar-color-custom', dataColor: color };
  }

  // Fallback: treat as theme-named color
  return { className: `avatar-color-${color}`, dataColor: null };
}


const headProps: HeadProps = {
  title: 'Our Team',
  description: 'Meet our team of experts dedicated to delivering the best solutions and secret to success.',
  url: `${siteDefaults.siteUrl}/team/`,
  image: siteImages.image,
  index: true,
  keywords: ['team', 'experts', 'professionals', 'staff'],
  // authorName: siteDefaults.authorName,
  // authorUrl: siteDefaults.authorUrl,
  publishedAt: siteDefaults.publishedDate,
  authors: [],
  showBreadcrumb: true
};
---

<BaseLayout headProps={headProps}>
 <FilesToLoadCSS files={[{name:'team-index', inline:true}]} />
 
  <script id="avatar-color-script" nonce={nonce} is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.avatar-color-custom[data-color]').forEach(el => {
        const clr = el.getAttribute('data-color');
        if (clr) el.style.backgroundColor = clr;
      });
    });
  </script>

   <HeroCollections
    title={headProps.title}
    description={headProps.description}
    bgColorClass="bg-secondary-base"
    textColorClass="col-base-00"
  />

  <section class="max-w-site mx-auto my-2 py-2">
    <ul class="team-grid no-bullets flex wrap jc-center gap py-05 px-0">
      {[...featured, ...others].map(member => {
        const { slug, name, role, expertise, color, image, useImage, useInitial, initialText, useGravatar } = member.data;
        const avatar = getAvatar({ slug, image, useImage, useInitial, initialText, useGravatar, color });

        return (
          <li class={`team-card bg-base-00 br br-r p-1-5 ta-center max-w-sidebar w-100p box-shadow relative ${member.data.featured ? 'featured' : ''}`}>
            {member.data.featured && <span class="featured-badge absolute bg-primary-base col-base-00 fs-xs py-02 px-05 bold">Featured</span>}
            <a class="team-link td-none p-0" href={`/team/${slug}/`}>
              {avatar.type === 'img' && <img class="avatar-img" src={avatar.src} alt={`Photo of ${name}`} loading="lazy" />}
              {avatar.type === 'gravatar' && <img class="avatar-img" src={avatar.src} alt={`Gravatar of ${name}`} loading="lazy" />}
              {avatar.type === 'initial' && (
                <div class={`avatar-initial ${avatar.colorClass}`} data-color={avatar.dataColor || null}>
                  {avatar.text}
                </div>
              )}
              {avatar.type === 'icon' && (
                <Icon name="avatar" width="120" height="120" class={avatar.colorClass} data-color={avatar.dataColor || null} />
              )}
              <h2 class="fs-2xl mt-05 mx-0 mb-02 col-base-100">{name}</h2>
              <p class="role fs-s italic col-base-70 mb-05">{role}</p>
              <p class="expertise fs-xs col-base-70 mt-05 pt-05">{expertise?.join(', ')}</p>
            </a>
          </li>
        );
      })}
    </ul>
  </section>
</BaseLayout>
