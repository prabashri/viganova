---
// src/pages/team/alumni.astro
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { siteDefaults } from '@/config/siteDefaults';
import { siteImages } from '@/config/siteImages';
import { Icon } from 'astro-icon/components';
import gravatarHashesJson from '@/data/email-hash.json';
import type { HeadProps } from '@/types/HeadProps';
import HeroCollections from '@/components/ui/HeroCollections.astro';
import CssFilesToLoad from '@/components/CssFilesToLoad.astro';

const gravatarHashes: Record<string, string> = Object.fromEntries(
  Object.entries(gravatarHashesJson).map(([slug, obj]) => [slug, obj.sha256])
);

// Filter + sort alumni
const alumni = (await getCollection('team'))
  .filter(member => 
    member.data.left &&
    !member.data.slug.startsWith('_') // Exclude hidden members
  )
  .sort((a, b) => {
    const aDate = a.data.left ? new Date(a.data.left).valueOf() : 0;
    const bDate = b.data.left ? new Date(b.data.left).valueOf() : 0;
    if (bDate !== aDate) return bDate - aDate;
    return (a.data.role || '').localeCompare(b.data.role || '') || (a.data.name || '').localeCompare(b.data.name || '');
  });

// Color palette for initials fallback
const colorPalette = [
  'avatar-color-green',
  'avatar-color-pink',
  'avatar-color-blue',
  'avatar-color-purple',
  'avatar-color-teal'
];
let colorIndex = 0;

// Color class resolver
function getAvatarColorClass(color?: string) {
  if (!color) {
    const assigned = colorPalette[colorIndex % colorPalette.length];
    colorIndex++;
    return assigned;
  }
  if (color.startsWith('avatar-color-')) return color;
  return 'avatar-color-default';
}

// Avatar resolver
function getAvatar({ slug, image, useImage, useInitial, initialText, useGravatar, color }: any) {
  if (useImage && image) return { type: 'img', src: image };
  if (useInitial && initialText) return { type: 'initial', text: initialText, colorClass: getAvatarColorClass(color) };
  if (useGravatar && gravatarHashes[slug]) {
    return { type: 'gravatar', src: `https://www.gravatar.com/avatar/${gravatarHashes[slug]}?s=300&d=identicon` };
  }
  return { type: 'icon', colorClass: getAvatarColorClass(color) };
}

const headProps: HeadProps = {
  title: 'Our Alumni',
  description: 'A tribute to former team members who shaped our journey.',
  url: `${siteDefaults.siteUrl}/team/alumni/`,
  image: siteImages.image,
  index: true,
  authors: [],
  // authorName: siteDefaults.authorName,
  // authorUrl: siteDefaults.authorUrl,
  publishedAt: siteDefaults.publishedDate,
  showBreadcrumb: true
};
---

<BaseLayout headProps={headProps}>
  <CssFilesToLoad files={[{name:'team-index', inline:true}]} />
  <HeroCollections
    title={headProps.title}
    description={headProps.description}
    content="We thank you sincerely for your valuable contributions to our success."
    bgColorClass="bg-secondary-base"
    textColorClass="col-base-00"
  />
  <section class="max-w-site mi-auto my-2 py-2">
    <ul class="team-grid no-bullets flex wrap jc-center gap py-05 px-0">
      {alumni.map(member => {
        const { slug, name, role, expertise, color, image, useImage, useInitial, initialText, useGravatar } = member.data;
        const avatar = getAvatar({ slug, image, useImage, useInitial, initialText, useGravatar, color });

        return (
          <li class="team-card bg-base-00 br br-r p-1-5 ta-center max-w-sidebar w-100p box-shadow relative">
            <a class="team-link td-none p-0" href={`/team/${slug}/`}>
              {avatar.type === 'img' && <img class="avatar-img" src={avatar.src} alt={`Photo of ${name}`} loading="lazy" />}
              {avatar.type === 'gravatar' && <img class="avatar-img" src={avatar.src} alt={`Gravatar of ${name}`} loading="lazy" />}
              {avatar.type === 'initial' && (
                <div class={`avatar-initial ${avatar.colorClass}`}>
                  {avatar.text}
                </div>
              )}
              {avatar.type === 'icon' && (
                <Icon name="avatar" width="120" height="120" class={avatar.colorClass} />
              )}
              <h2 class="fs-2xl mt-05 mx-0 mb-02 col-base-100">{name}</h2>
              <p class="role fs-s italic col-base-70 mb-05">{role}</p>
              <p class="expertise fs-xs col-base-70 mt-05 pt-05">{expertise?.join(', ')}</p>
            </a>
          </li>
        );
      })}
    </ul>
  </section>
</BaseLayout>
