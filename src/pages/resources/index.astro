---
import BaseLayout from '@/layouts/BaseLayout.astro';
import { siteDefaults } from '@/config/siteDefaults';
import { siteImages } from '@/config/siteImages';
import type { HeadProps } from '@/types/HeadProps';
import HeroCollections from '@/components/ui/HeroCollections.astro';
import CardCollections from '@/components/ui/CardCollections.astro';
import type { CardProps } from '@/types/CardProps';
import { getCollection } from 'astro:content';
import modifiedDatesJson from '@/data/modified-dates.json';
import { toHuman } from '@/utils/date-format';

// =========================
// ðŸ”¹ Constants
// =========================
const entry = 'resource';
const entryCfg = siteDefaults.collections[entry];
const base = entryCfg?.base ?? 'resources';
const basePath = `/${base}`;

const heroTitle = `Apostille resources & guides by ${siteDefaults.siteName}`;
const metaDescription =
  `Understand apostille in India â€” what to prepare, how it works, timelines & checklists. Trusted guides from ${siteDefaults.siteName}.`;

// =========================
// ðŸ”¹ Last-modified helper
// =========================
const modifiedDates = modifiedDatesJson as Record<string, string>;

function getLastModified(post: any): string | undefined {
  const slug = post.data.slug ?? post.id;
  const key = `${base}/${slug}`;
  return (
    modifiedDates[key] ||
    post.data.lastModified ||
    post.data.updatedDate ||
    post.data.publishedDate ||
    undefined
  );
}

// =========================
// ðŸ”¹ Load, filter, sort
// =========================
const all = (await getCollection(entry)).filter(
  (p) => !p.id.startsWith('_') && p.data?.draft !== true
);

const posts = all.sort((a, b) => {
  const ad = new Date(getLastModified(a) ?? 0).valueOf();
  const bd = new Date(getLastModified(b) ?? 0).valueOf();
  return bd - ad;
});

// Split featured vs others
const featuredPosts = posts.filter((p) => p.data?.featured === true);
const otherPosts    = posts.filter((p) => p.data?.featured !== true);

// =========================
const headProps: HeadProps = {
  title: heroTitle,
  description: metaDescription,
  image: siteImages.image,
  canonicalUrl: `${siteDefaults.siteUrl}${basePath}/`,
  index: true,
  keywords: posts.map((p) => p.data.title),
  type: 'collection',
  url: `${siteDefaults.siteUrl}${basePath}/`,
  authors: []
};

// =========================
// ðŸ”¹ Map to cards
// =========================
function mapToCardProps(post: any, index: number): CardProps {
  const postSlug = post.data.slug ?? post.id;
  const lastMod  = getLastModified(post);

  return {
    link: `${basePath}/${postSlug}/`,
    linkAriaLabel: `Read resource: ${post.data.title}`,
    image: post.data.heroImage ?? '',
    imageAlt: post.data.heroImageAlt ?? post.data.title,
    title: post.data.title,
    description: post.data.description ?? '',
    afterDescription: lastMod ? (toHuman(lastMod) ?? '') : '',
    orientation: 'vertical',
    imageSize: 320,
    roleType: 'list',
    loading: index < 3 ? 'eager' : 'lazy'
  };
}

const featuredCards: CardProps[] = featuredPosts.map((p, i) => mapToCardProps(p, i));
const otherCards:    CardProps[] = otherPosts.map((p, i) => mapToCardProps(p, i));
---

<BaseLayout headProps={headProps}>
  <HeroCollections
    title={heroTitle}
    description={metaDescription}
    bgColorClass="bg-secondary-dark"
    textColorClass="col-base-00"
    image=""
    imageAlt="Resources Hero Image"
    imageLoading="delay"
  />

  { (featuredCards.length > 0 || otherCards.length > 0) && (
    <div class="max-w-site mx-auto my-1 py-1">
      {featuredCards.length > 0 && (
        <CardCollections cards={featuredCards} wrapper="ul" orientation="horizontal" roleType="list" entry={entry} />
      )}
      <hr class="br-top-0" />
      {otherCards.length > 0 && (
        <CardCollections cards={otherCards} wrapper="ul" roleType="list" entry={entry} />
      )}
    </div>
  )}

</BaseLayout>
