---
import BaseLayout from '@/layouts/BaseLayout.astro';
import { siteDefaults } from '@/config/siteDefaults';
import { siteImages } from '@/config/siteImages';
import type { HeadProps } from '@/types/HeadProps';

import type { EntryMetaProps } from '@/types/EntryMetaProps';
import HeroCollections from '@/components/ui/HeroCollections.astro';

import { collectFieldCounts } from "@/utils/collectFieldCounts";
import CardCollections from '@/components/ui/CardCollections.astro';
import type { CardProps } from '@/types/CardProps';

const entry = "tags";
import { tagMeta as entryMeta } from '@/config/tagMeta';

// Map entryMeta for quick lookup
const entryMetaMap = new Map<string, EntryMetaProps>(
  Object.entries(entryMeta ?? {}).map(([name, meta]) => [
    name.toLowerCase(),
    { name, ...meta }
  ])
);

// Get counts
const countsArray = await collectFieldCounts(entry, 3);

const knownEntries: (EntryMetaProps & { count: number })[] = [];
const unknownEntries: (EntryMetaProps & { count: number })[] = [];

// Format unknown titles
function formatTitle(slug: string) {
  return slug
    .split('-')
    .map(w => w.charAt(0).toUpperCase() + w.slice(1))
    .join(' ');
}

// Separate into known vs unknown
for (const { name, count } of countsArray) {
  const metaItem = entryMetaMap.get(name);
  if (metaItem) {
    knownEntries.push({ ...metaItem, count });
  } else {
    unknownEntries.push({
      name,
      title: formatTitle(name),
      description: `Posts related to ${formatTitle(name)}.`,
      image: `/${entry}/default-image.png`,
      imageAlt: `${formatTitle(name)} image`,
      url: `/${entry}/${name}/`,
      count
    });
  }
}

// Merge
const mergedEntries = [...knownEntries, ...unknownEntries];

// SEO
const headProps: HeadProps = {
  title: `All ${entry.charAt(0).toUpperCase() + entry.slice(1)} | ${siteDefaults.siteName}`,
  description: `Browse all ${entry} for tools, guides, and blog posts on ${siteDefaults.siteName}.`,
  image: siteImages.image,
  canonicalUrl: `${siteDefaults.siteUrl}/${entry}/`,
  index: true,
  keywords: mergedEntries.map(c => c.name),
  type: 'collection',
  url: `${siteDefaults.siteUrl}/${entry}/`,
  authors: [],  
};

// Map to cards
function mapToCardProps(item: EntryMetaProps & { count: number }, index: number): CardProps {
  return {
    link: item.url ?? `/${entry}/${item.name}/`,
    linkAriaLabel: `View all posts in ${entry.slice(0, -1)} ${item.title ?? item.name}`,
    image: item.image ?? '',
    imageAlt: item.imageAlt ?? item.title ?? item.name,
    title: item.title ?? item.name,
    description: item.description ?? '',
    afterDescription: `${item.count} posts`,
    orientation: 'vertical',
    imageSize: 320,
    roleType: 'list',
    loading: index < 3 ? 'eager' : 'lazy'
  };
}

const mergedCards: CardProps[] = mergedEntries.map((item, index) => mapToCardProps(item, index));
/*
    image={siteDefaults.image}
    imageAlt={`${entry} Hero Image`}
    imageLoading="delay"
  */


---

<BaseLayout headProps={headProps}>
  <HeroCollections
    title={`All ${entry.charAt(0).toUpperCase() + entry.slice(1)}`}
    description={`Browse all ${entry} for tools, guides, and blog posts on ${siteDefaults.siteName}.`}
    bgColorClass="bg-secondary-base"
    textColorClass="col-base-00"

  />

  {mergedCards.length > 0 && (
    <section class="max-w-site mx-auto my-2">
      <CardCollections cards={mergedCards} wrapper="ul" roleType="list" entry={entry} />
    </section>
  )}
</BaseLayout>
