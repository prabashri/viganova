---
// src/components/CssHead.astro
import manifest from '@/data/assets-manifest.json';
import { inlineCss } from '@/data/generated-inline-css.ts';

const devCssOrder = [
  '/src/styles/inline/base.css',
  '/src/styles/inline/colors.css',
  '/src/styles/inline/header.css',
  '/src/styles/inline/size.css',
  '/src/styles/inline/hero.css',
  /** main css */
  '/src/styles/main/base.css',
  '/src/styles/main/components.css',
  '/src/styles/main/colors.css',
  '/src/styles/main/toc.css',
  '/src/styles/main/form.css',
  '/src/styles/main/utilities.css',
  '/src/styles/main/non-critical.css',
  '/src/styles/main/search-icon.css',
  '/src/styles/main/search.css',
  '/src/styles/main/footer.css',
  '/src/styles/main/faq.css',
  '/src/styles/main/markdown.css',
  '/src/styles/main/table.css',
  '/src/styles/main/blockquote.css',
  '/src/styles/main/consent-banner.css',
  // '/src/styles/main/print.css',
  '/src/styles/main/star-rating.css',
  '/src/styles/main/callout.css',
];

const nonce = (Astro.locals as any).nonce;

const isDev = import.meta.env.DEV;
let cssFiles: string[] = [];

let preloadCssFiles: string[] = [];
// let nonCriticalCssFiles: string[] = [];

preloadCssFiles = [manifest.css.main.file];            // e.g. /styles/main.abc123.min.css
  // nonCriticalCssFiles = [manifest.css.nonCritical.file]; // e.g. /styles/non-critical.xyz456.min.css
---
{/* -- ✅ Preload fonts --*/}
<link rel="preload" href="/fonts/Inter-Regular-Subset.woff2" as="font" fetchpriority="high" type="font/woff2" crossorigin>
<link rel="preload" href="/fonts/Inter-Bold-Subset.woff2" as="font" fetchpriority="high" type="font/woff2" crossorigin>
{ !isDev && preloadCssFiles[0] && (
  <>
    <link rel="preload" as="style" href={preloadCssFiles[0]} />
  </>
)}

{/* -- ✅ PROD: Inline critical CSS -- */}
{ !isDev && inlineCss && <style nonce={nonce} id="inline-css" set:html={inlineCss} />}

{/* -- ✅ PROD: Preload + load main CSS -- */}
{ !isDev && preloadCssFiles[0] && (
  <>
    <link rel="stylesheet" href={preloadCssFiles[0]} fetchpriority="high" />
  </>
)}

{isDev && devCssOrder.map(href => (
  <link rel="stylesheet" href={`${href}?t=${import.meta.hot?.data?.timestamp ?? Date.now()}`} />
))}
