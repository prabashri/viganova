---
// src/components/ReviewList.astro
/**
 * Usage examples:
 * <ReviewList reviews={allReviews} />
 * <ReviewList matchSlug={Astro.params.slug} showRating />
 */

import type { Review } from "@/utils/reviews";
import { siteDefaults } from "@/config/siteDefaults";
import { toRelativeUrl, toAbsoluteUrl } from "@/utils/urls";
import ResponsiveImage from "@/components/ResponsiveImage.astro";
import Anchor from "@/components/ui/Anchor.astro";
import StarRating from "@/components/ui/StarRating.astro";
import { buildOrganizationSchema } from "@/utils/schemaOrganization";
import { getAllReviews, getGlobalAggregate } from "@/utils/reviews";

const { orgId } = buildOrganizationSchema();

const nonce = (Astro.locals as any).nonce;

/* ---------- Props ---------- */
const {
  reviews = [],
  reviewCount,
  matchSlug,
  matchUrl,
  positiveOnly = false,
  showRating = false,
  showReview = true,
  showRatingSchema = true,
  reviewSchema = true,
  wrapper = 'ul',
  className = '',
} = Astro.props as {
  reviews?: Review[];
  reviewCount?: number;
  matchSlug?: string;
  matchUrl?: string;
  positiveOnly?: boolean;
  showRating?: boolean;
  showReview?: boolean;
  showRatingSchema?: boolean;
  reviewSchema?: boolean;
  wrapper?: 'ul' | 'div';
  className?: string;
};

/* ---------- Data Fallback ---------- */
const allReviews = (reviews && reviews.length > 0) ? reviews : await getAllReviews();
await getGlobalAggregate();

/* ---------- UI Classes ---------- */
const baseClasses = 'card max-w-sidebar w-100p br-primary-light hover-br-primary br-r bg-base-00 box-shadow p-05';
const orientationClass = 'flex flex-col big-flex-row big-flex-1 gap';
const contentWrapperClass = 'flex flex-col flex-1 p-05';
const tagClass = 'tag-link bg-primary-lighter col-base-100 br-r text-xs px-05 py-02';

/* ---------- Helpers ---------- */
function serviceLabel(r: Review) {
  return r?.target?.name || r?.service?.name || 'Service';
}
function serviceUrl(r: Review) {
  return r?.target?.url
    ? toRelativeUrl(r.target.url, { cdn: 'never' })
    : r?.service?.slug
      ? `/services/${r.service.slug}/`
      : undefined;
}
function firstInitial(name?: string) {
  const s = (name || '').trim();
  return s ? s[0].toUpperCase() : '?';
}
function relOrEmpty(u?: string) {
  if (!u) return '';
  const rel = toRelativeUrl(u, { cdn: 'never' });
  return rel.startsWith('/') ? rel : '';
}
function getLastDate(r: Review): string | undefined {
  return (r as any)?.dateModified || r?.datePublished || undefined;
}
function normalizeRel(u?: string) {
  if (!u) return '';
  const rel = toRelativeUrl(u, { cdn: 'never' }).replace(/[#?].*$/, '');
  return rel.replace(/\/+$/, '');
}
function extractServiceSlugFromUrl(u?: string): string | null {
  if (!u) return null;
  const rel = normalizeRel(u);
  const m = rel.match(/^\/services\/([^\/]+)$/i);
  return m ? m[1].toLowerCase() : null;
}
function matchesService(r: Review): boolean {
  if (matchSlug) {
    const wanted = matchSlug.toLowerCase();
    const slug1 = (r?.service?.slug || '').toLowerCase();
    const slug2 = extractServiceSlugFromUrl(r?.target?.url || '');
    return (slug1 === wanted) || (slug2 === wanted);
  }
  if (matchUrl) {
    const wanted = normalizeRel(matchUrl);
    const tRel = normalizeRel(r?.target?.url || '');
    const sRel = r?.service?.slug ? normalizeRel(`/services/${r.service.slug}/`) : '';
    return tRel === wanted || sRel === wanted;
  }
  return true;
}
function buildAnchorId(r: Review, idx: number) {
  const raw = r.id || (r as any)?.slug || `${r.headline || 'review'}-${r.datePublished || ''}`.toLowerCase();
  let cleaned = String(raw).replace(/[^a-zA-Z0-9]+/g, '-').replace(/^-+|-+$/g, '').toLowerCase();
  if (!cleaned) cleaned = `review-${idx + 1}`;
  if (!/^[a-z]/.test(cleaned)) cleaned = `r-${cleaned}`;
  return cleaned;
}

/* ---------- Filter & Sort ---------- */
const baseSet = allReviews
  .filter((r) => (r as any)?.draft !== true)
  .filter((r) => matchesService(r));

const visibleSet = positiveOnly
  ? baseSet.filter((r) => (Number((r as any)?.rating) || 0) >= 4)
  : baseSet;

const sorted = visibleSet.sort((a, b) => {
  const ad = new Date(getLastDate(a) ?? 0).valueOf();
  const bd = new Date(getLastDate(b) ?? 0).valueOf();
  return bd - ad;
});

const shown = typeof reviewCount === 'number' ? sorted.slice(0, reviewCount) : sorted;

/* ---------- Aggregate ---------- */
const schemaCount = baseSet.length;
const schemaValue = schemaCount
  ? +(baseSet.reduce((s, r) => s + (Number((r as any)?.rating) || 0), 0) / schemaCount).toFixed(2)
  : null;

const uiCount = visibleSet.length;
const uiValue = uiCount
  ? +(visibleSet.reduce((s, r) => s + (Number((r as any)?.rating) || 0), 0) / uiCount).toFixed(2)
  : null;

/* ---------- Service Context ---------- */
const isServiceContext = Boolean(matchSlug || matchUrl);
const first = baseSet[0];
const serviceRelUrl = first
  ? (first?.target?.url
      ? toRelativeUrl(first.target.url, { cdn: 'never' })
      : first?.service?.slug
        ? `/services/${first.service.slug}/`
        : undefined)
  : (matchSlug ? `/services/${matchSlug}/` : undefined);

const serviceUrlAbs = serviceRelUrl ? toAbsoluteUrl(serviceRelUrl, { cdn: 'never' }) : null;
const serviceName = first?.target?.name || first?.service?.name || matchSlug || siteDefaults.siteName;

/* ---------- Aggregate JSON-LD ---------- */
let aggregateJsonLd: any = null;

if (schemaValue && schemaCount > 0) {
  aggregateJsonLd = {
    "@context": "https://schema.org",
    "@type": isServiceContext ? "Service" : "Organization",
    "@id": serviceUrlAbs || siteDefaults.siteUrl,
    "name": serviceName,
    "url": serviceUrlAbs || siteDefaults.siteUrl,
    ...(isServiceContext ? { "provider": { "@id": orgId } } : {}),
    "aggregateRating": {
      "@type": "AggregateRating",
      "ratingValue": schemaValue,
      "reviewCount": schemaCount
    }
  };
} else if (isServiceContext && serviceUrlAbs) {
  // fallback pointer when no reviews
  aggregateJsonLd = {
    "@context": "https://schema.org",
    "@type": "Service",
    "@id": serviceUrlAbs,
    "name": serviceName,
    "url": serviceUrlAbs,
    "mainEntityOfPage": serviceUrlAbs
  };
}

/* ---------- Wrapper tags ---------- */
const WrapperTag = wrapper;
const ItemTag = wrapper === 'ul' ? 'li' : 'div';
const wrapperRole = wrapper === 'ul' ? 'list' : undefined;
const itemRole = wrapper === 'ul' ? 'listitem' : undefined;
---

{showRating && uiValue != null && uiCount > 0 && (
  <div class="flex flex-row text-xl bold ta-center br-secondary bg-base-00 col-base-100 br-r my-2 p-1 w-fit mx-auto">
    <StarRating rating={uiValue} showNumber />
    <span class="opacity-75">/ 5 from {uiCount} reviews</span>
  </div>
)}

{showReview && (
  <WrapperTag class={`no-bullets flex wrap gap-2 jc-center my-2 mx-auto ${className}`} role={wrapperRole}>
    {shown.map((r, i) => {
      const anchor = buildAnchorId(r, i);
      const badgeText = (r as any)?.target?.type || 'Service';
      const serviceHref = serviceUrl(r);
      const reviewUrl = `${siteDefaults.siteUrl.replace(/\/$/, '')}/reviews/#${anchor}`;
      const avatarPath = relOrEmpty((r as any)?.author?.avatar);
      const hasAvatarRI = !!avatarPath;
      const nameText = (r as any)?.author?.name || 'Anonymous';
      const profileHref = (r as any)?.author?.profileUrl ? toRelativeUrl((r as any).author.profileUrl, { cdn: 'never' }) : undefined;

      return (
        <ItemTag class={`${baseClasses} ${orientationClass}`} id={anchor} role={itemRole}>
          <div class={`${contentWrapperClass} pt-05 pb-0`}>
            <h3 class="text-base bold clamp-2 my-1">
              <Anchor href={`#${anchor}`} className="td-none underline">{r.headline}</Anchor>
            </h3>

            <div class="text-base jc-space-between ai-center flex wrap gap-2 mt-02 py-05">
              <StarRating rating={r.rating} showNumber />
              <span class={tagClass}>{badgeText}</span>
            </div>

            <div class="text-xs mt-02 ai-center jc-space-between flex wrap gap-05">
              {serviceHref
                ? <Anchor href={serviceHref} className="td-none underline opacity-75">{serviceLabel(r)}</Anchor>
                : <span class="opacity-75">{serviceLabel(r)}</span>}
              {(r as any).verifiedPurchase && <span class="tick col-success-dark bold">Verified</span>}
            </div>

            <p class="text-s py-05 clamp-8">{r.body}</p>

            {(r as any).pros?.length && (
              <div class="mt-05">
                <span class="text-s block bold my-02">Customers loved</span>
                <ul class="no-bullets flex wrap gap-05">
                  {(r as any).pros.map((p: string) => (
                    <li class="tag-link bold bg-success-light col-base-100 br-r text-xs px-05 py-02">{p}</li>
                  ))}
                </ul>
              </div>
            )}

            <div class="flex ai-start gap-05 hr mb-0">
              {hasAvatarRI ? (
                <ResponsiveImage
                  src={avatarPath}
                  alt={nameText}
                  sizes={24}
                  width={24}
                  height={24}
                  breakpoints={{ mobile: 24, desktop: 24 }}
                  imageClassName="round br-thin-primary-light br-r-unset"
                  className="w-1-5 h-1-5"
                  loading="lazy"
                />
              ) : (
                <div
                  class="w-1-5 h-1-5 round bg-primary-lighter br-thin-primary-light flex ai-center jc-center text-xs bold col-base-900"
                  aria-label={`Reviewer initial ${firstInitial(nameText)}`}
                >
                  {firstInitial(nameText)}
                </div>
              )}

              <div class="flex flex-col text-xs ai-start gap-02">
                <div>
                  {profileHref
                    ? <Anchor href={profileHref} className="td-none underline text-s bold">{nameText}</Anchor>
                    : <span class="text-s bold">{nameText}</span>}
                </div>

                {((r as any).author?.designation || (r as any).author?.organization) && (
                  <div class="mt-02 opacity-80">
                    {(r as any).author?.designation ?? ''}
                    {(r as any).author?.designation && (r as any).author?.organization ? ' at ' : ''}
                    {(r as any).author?.organization ?? ''}
                  </div>
                )}

                {((r as any).location?.name || (r as any).location?.city) && (
                  <div class="mt-02 opacity-80">
                    {(r as any).location?.name || (r as any).location?.city}
                    {(r as any).location?.countryCode ? `, ${(r as any).location.countryCode}` : ''}
                  </div>
                )}

                {r.datePublished && (
                  <time class="opacity-75" datetime={new Date(r.datePublished).toISOString()}>
                    {r.datePublished}
                  </time>
                )}
              </div>
            </div>
          </div>

          {/* Per-item Review JSON-LD */}
          {reviewSchema && (
            <script
              is:inline
              data-id="review-schema"
              nonce={nonce}
              type="application/ld+json"
              set:html={JSON.stringify({
                '@context': 'https://schema.org',
                '@type': 'Review',
                '@id': reviewUrl,
                url: reviewUrl,
                name: r.headline,
                reviewBody: r.body,
                inLanguage: r.language || 'en',
                datePublished: r.datePublished,
                reviewRating: {
                  '@type': 'Rating',
                  ratingValue: r.rating,
                  bestRating: 5,
                  worstRating: 1
                },
                author: (r as any).author?.name ? {
                  '@type': (r as any).author?.type || 'Person',
                  name: (r as any).author.name,
                  url: (r as any).author?.profileUrl ? toAbsoluteUrl((r as any).author.profileUrl, { cdn: 'never' }) : undefined,
                  image: (r as any).author?.avatar ? toAbsoluteUrl((r as any).author.avatar, { cdn: 'never' }) : undefined,
                  ...((r as any).author?.designation ? { jobTitle: (r as any).author.designation } : {}),
                  ...((r as any).author?.organization ? { worksFor: { '@type': 'Organization', name: (r as any).author.organization } } : {})
                } : undefined,
                itemReviewed: {
                  '@type': isServiceContext ? 'Service' : 'Organization',
                  '@id': serviceHref ? toAbsoluteUrl(serviceHref, { cdn: 'never' }) : siteDefaults.siteUrl,
                  name: serviceLabel(r),
                  url: serviceHref ? toAbsoluteUrl(serviceHref, { cdn: 'never' }) : siteDefaults.siteUrl
                },
                publisher: {
                  '@type': 'Organization',
                  '@id': orgId,
                  name: siteDefaults.siteName,
                  url: toAbsoluteUrl('/', { cdn: 'never' })
                }
              })}
            />
          )}
        </ItemTag>
      );
    })}
  </WrapperTag>
)}

{aggregateJsonLd && (
  <script nonce={nonce} id="review-aggregate" type="application/ld+json" set:html={JSON.stringify(aggregateJsonLd)} />
)}
