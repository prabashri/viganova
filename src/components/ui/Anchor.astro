---
// src/components/ui/Anchor.astro
import { siteDefaults } from '@/config/siteDefaults';
import type { Variant } from '@/types/navigation';

interface Props {
  href: string;
  className?: string;
  target?: '_blank' | '_self';
  rel?: string;
  ariaLabel?: string;
  title?: string;

  /** Visual intent */
  type?: 'link' | 'button';
  variant?: Variant;

  /** Analytics / tracking */
  dataId?: string;
  dataAction?: string;
  dataLabel?: string;
  dataTargets?: string;

  /** A11y */
  role?: string | undefined;
}

const {
  href,
  className = '',
  target,
  rel,
  ariaLabel,
  title,

  type = 'link',
  variant = 'plain',

  dataId,
  dataAction,
  dataLabel,
  dataTargets,

  role,
  ...rest // forward extra attributes, including any data-* you didn’t explicitly type
} = Astro.props as Props & Record<string, any>;

// Site origin + external detection
const siteOrigin = Astro.site?.origin ?? new URL(siteDefaults.siteUrl).origin;

let resolvedHref: URL;
try {
  resolvedHref = new URL(href, siteOrigin);
} catch {
  resolvedHref = new URL('/', siteOrigin);
}

const isExternal = resolvedHref.origin !== siteOrigin;

// Target/rel defaults for safety
const finalTarget = target ?? (isExternal ? '_blank' : '_self');
const finalRel = rel ?? (isExternal && finalTarget === '_blank' ? 'noopener noreferrer' : undefined);

// Variant class logic (apply button variants only when type="button")
const variantClassMap: Record<string, string> = {
  plain: '',
  nav: 'no-bb br-r',
  ghost:
    'button bg-transparent col-inherit hover-bg-base-10 transition focus-vis-bg-base-200 focus-vis-col-base-900',
  primary:
    'button col-base-00 hover-col-base-100 br-thick bg-primary hover-bg-primary-lighter transition focus-vis-bg-primary-lighter focus-vis-col-base-100 p-05',
  secondary:
    'button bg-primary-lighter-x col-primary-darker hover-col-base-00 br-thick hover-bg-primary transition focus-vis-bg-primary focus-vis-col-base-00 p-05',
};

// If not a "button" type, ignore button-specific classes except 'nav'/'plain'
const allowedVariant =
  type === 'button' ? variant : (variant === 'nav' ? 'nav' : 'plain');

const variantClass = variantClassMap[variant] ?? '';
const computedClass = `${variantClass} ${className}`.trim();

// Default action fallback for analytics if caller didn’t set one
const defaultAction =
  type === 'button' ? 'button_click' : isExternal ? 'outbound_click' : 'link_click';

// Compute role default: use provided role, else 'button' for type="button", else 'link'
const computedRole = role ?? (type === 'button' ? 'button' : 'link');


/**
 * Anchor component for links and link-style buttons
 * - Automatically detects external links and sets rel/target accordingly
 * - Supports both standard links and button-style links via `type="button"`
 * - Accepts `variant="primary" | "secondary"` when `type="button"` is used
 * - Inherits styling from your utility-based CSS system
 * - Supports accessibility via `aria-label`, `title`, etc.
 * 
 * Example usage:
 * 
 * <!-- Standard link -->
 * <Anchor href="/contact">Contact Us</Anchor>
 * 
 * <!-- External link with icon -->
 * <Anchor href="https://github.com/nviewsweb" target="_blank">
 *   GitHub
 *   <img src="/icons/github.svg" alt="GitHub logo" />
 * </Anchor>
 * 
 * <!-- Button-styled link (primary) -->
 * <Anchor href="/tools/font-size-typescale" type="button" variant="primary">
 *   Font Size Tool
 * </Anchor>
 * 
 * <!-- Button-styled link (secondary) -->
 * <Anchor href="/learn-more" type="button" variant="secondary">
 *   Learn More
 * </Anchor>
 * 
 * <!-- Plain link -->
<Anchor href="/terms" variant="plain">Terms</Anchor>

<!-- Nav link -->
<Anchor href="/about" variant="nav">About Us</Anchor>

<!-- Ghost button -->
<Anchor href="/join" type="button" variant="ghost">Join Now</Anchor>

<!-- Primary button -->
<Anchor href="/signup" type="button" variant="primary">Sign Up</Anchor>

<!-- Secondary button -->
<Anchor href="/contact" type="button" variant="secondary">Contact</Anchor>

 */
---
<a
  href={href}
  target={finalTarget}
  rel={finalRel}
  class={computedClass}
  aria-label={ariaLabel}
  title={title}
  itemprop="url"
  role={computedRole as any}

  data-id={dataId}
  data-action={dataAction ?? defaultAction}
  data-label={dataLabel}
  data-targets={dataTargets}

  {...rest}
>
  <slot name="icon-left" />
  <slot />
  <slot name="icon-right" />
</a>


