---
// src/components/ui/Breadcrumb.astro
import { toAbsoluteUrl, toRelativeUrl } from "@/utils/urls";

interface Crumb {
  name: string;   // Full name for JSON-LD
  url: string;    // Absolute URL (canonical)
  label?: string; // Optional short UI label
}

interface Props {
  showBreadcrumb?: boolean;
  title?: string;          // Page title (for last crumb label)
  breadcrumbs?: Crumb[];   // Optional override (any URLs allowed)
}

const { showBreadcrumb = true, title: pageTitle, breadcrumbs: override } = Astro.props;

// Segments from current path (e.g., "/services/marriage-certificate-apostille/")
const segments = Astro.url.pathname.split("/").filter(Boolean);

// Auto-hide on homepage (no segments)
const shouldShow = showBreadcrumb && segments.length > 0;

// UI text helpers
function formatSegment(seg: string) {
  const s = seg.replace(/[-_]/g, " ");
  return s.charAt(0).toUpperCase() + s.slice(1);
}
function trimLabel(s: string, max = 30) {
  return s.length > max ? s.slice(0, max) + "…" : s;
}

// Ensure a page-like path ends with a trailing slash (no file extension)
function pagePath(path: string) {
  const hasExt = /\.[a-z0-9]{2,8}$/i.test(path);
  if (hasExt) return path;
  return path.endsWith("/") ? path : `${path}/`;
}

// Build default crumbs from the current URL
const derivedCrumbs: Crumb[] = [
  // Home
  { name: "Home", url: toAbsoluteUrl("/", { cdn: "never" }) },

  // Intermediate segments → absolute canonical URLs
  ...segments.map((seg, i) => {
    const isLast = i === segments.length - 1;
    const path = pagePath("/" + segments.slice(0, i + 1).join("/"));

    // Full (untrimmed) name for schema
    const fullName = isLast && pageTitle ? pageTitle : formatSegment(seg);

    // UI label
    const uiLabel = isLast && pageTitle
      ? trimLabel(pageTitle, 20)
      : trimLabel(formatSegment(seg), 30);

    return {
      name: fullName,
      url: toAbsoluteUrl(path, { cdn: "never" }), // canonical absolute
      label: uiLabel
    };
  })
];

// If override provided, normalize it to absolute canonical URLs & prepend Home
const crumbs: Crumb[] = Array.isArray(override) && override.length
  ? [
      { name: "Home", url: toAbsoluteUrl("/", { cdn: "never" }) },
      ...override.map((c) => ({
        name: c.name,
        url: toAbsoluteUrl(pagePath(c.url || "/"), { cdn: "never" }),
        label: c.label ?? undefined
      }))
    ]
  : derivedCrumbs;

// JSON-LD uses absolute canonical URLs + full names
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": crumbs.map((item, index) => ({
    "@type": "ListItem",
    position: index + 1,
    name: item.name,
    item: item.url
  }))
};

const nonce = (Astro.locals as any).nonce;
---

{shouldShow && (
  <nav class="breadcrumb max-w-site flex wrap ai-center mx-auto text-xs px-05 py-02 my-05" aria-label="Breadcrumb navigation">
    <ul class="flex wrap ai-center no-bullets no-margin p-unset">
      {crumbs.map((item, idx) => {
        // Site-relative link for UI (external stays absolute)
        const href = toRelativeUrl(item.url, { cdn: "never" });
        const isLast = idx === crumbs.length - 1;
        return (
          <li class="flex ai-center">
            {idx > 0 && <span class="mx-05 px-05" aria-hidden="true">›</span>}
            {isLast ? (
              <strong aria-current="page">{item.label ?? item.name}</strong>
            ) : (
              <a href={href} class="td-none px-05 py-02">{item.label ?? item.name}</a>
            )}
          </li>
        );
      })}
    </ul>
  </nav>
)}

<script type="application/ld+json" id={`breadcrumb-schema`} nonce={nonce} set:html={JSON.stringify(breadcrumbSchema)} />
