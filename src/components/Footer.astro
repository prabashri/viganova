---
const today = new Date();

import SocialLink from './SocialLink.astro';
import { siteDefaults } from '@/config/siteDefaults';
import { Icon } from 'astro-icon/components';
import { siteImages } from '@/config/siteImages';
import Anchor from '@/components/ui/Anchor.astro';
import IconMask from '@/components/IconMask.astro';
import manifest from '@/data/assets-manifest.json';
import FilesToLoadJS from '@/components/FilesToLoadJS.astro';

import { resolveLogoFromManifest } from "@/utils/resolveLogos";
import { toAbsoluteUrl, idFor } from "@/utils/urls";

// ⬇ NEW: bring in service data
import { servicePagesList } from '@/config/siteServicePages';

// ======== Site Basics ========

const manifestLogos = manifest?.logos?.files || {};
const hasDesktopSvg = Boolean(manifestLogos.desktopLogoSvg);

const siteName = siteDefaults.siteName || 'EasyApostille';
const siteTitle = siteDefaults.title || '';
const siteUrl = (siteDefaults.siteUrl || 'https://VerifiedApostille.in/').replace(/\/?$/, '/');

const domainName = siteDefaults.domainName || 'VerifiedApostille.in';

// Build address string: prefer brand address, then parent org address
const brandAddr = siteDefaults.address;
const parentAddr = (siteDefaults as any)?.parentOrganization?.address;
const addr = brandAddr || parentAddr || null;
const location = addr
  ? [
      addr.streetAddress,
      addr.addressLocality,
      addr.addressRegion,
      addr.postalCode,
      (addr.addressCountryCode || addr.addressCountry),
    ]
      .filter(Boolean)
      .join(', ')
  : '';

// Contact (primary + optional secondary)
const email = siteDefaults.contact?.email || `contact@${domainName}`;
const phone = siteDefaults.contact?.phone || '';
const waDigits = (siteDefaults.contact?.whatsapp || '').replace(/\D/g, '');
const waHref = waDigits ? `https://wa.me/${waDigits}` : undefined;

// Logo alt
const desktopAlt = `${siteName} Desktop Logo`;

// ======== Footer Nav Builders (pages / collections) ========

type Colls = typeof siteDefaults.collections;
type Pages = typeof siteDefaults.pages;

const collections = (siteDefaults.collections || {}) as Colls;
const pages = (siteDefaults.pages || {}) as Pages;

const clean = (s = '') => s.replace(/^\/+|\/+$/g, '');
const withSlash = (s = '') => ('/' + clean(s) + '/').replace(/\/+/g, '/');
const rootOr = (base: string) => (base ? withSlash(base) : '/');

// We keep this in case you still expose other collections like /blog, /resources, etc.
const preferredCollectionOrder = [
  'post',
  'service',
  'resource',
  'blog',
  'videos',
  'audio',
  'team',
];

function buildCollectionMainLinks() {
  const entries = Object.entries(collections).filter(
    ([, cfg]) => Boolean(cfg?.index || cfg?.sitemap) && Boolean(cfg?.showInFooterNav)
  );

  // Order by preferred list first, then by label
  const ordered = entries.sort((a, b) => {
    const ai = preferredCollectionOrder.indexOf(a[0]);
    const bi = preferredCollectionOrder.indexOf(b[0]);
    if (ai !== -1 && bi !== -1) return ai - bi;
    if (ai !== -1) return -1;
    if (bi !== -1) return 1;
    const al = a[1]?.label || a[0];
    const bl = b[1]?.label || b[0];
    return String(al).localeCompare(String(bl));
  });

  return ordered.map(([key, cfg]) => {
    const base = clean(cfg?.base || '');
    return {
      key,
      label: cfg?.label || key,
      href: rootOr(base),
    };
  });
}

function buildPageLinks() {
  return Object.entries(pages)
    .filter(
      ([, p]) =>
        Boolean(p?.enabled) &&
        Boolean('showInFooterNav' in p ? (p as any).showInFooterNav : false)
    )
    .map(([key, p]) => ({
      key,
      label: p?.label,
      title: p?.title || '',
      href: p?.path || '/',
    }))
    .sort((a, b) => String(a.label).localeCompare(String(b.label)));
}

const homeLink = { key: 'home', label: 'Home', href: '/' };

const collectionLinks = buildCollectionMainLinks()
  // Avoid duplicating "/" twice if you have a root collection with empty base
  .filter((c) => c.href !== '/' || c.key === 'post');

const pageLinks = buildPageLinks();

// De-duplicate by href while preserving order
const seen = new Set<string>();
const mainLinks = [homeLink, ...collectionLinks, ...pageLinks].filter((item) => {
  if (seen.has(item.href)) return false;
  seen.add(item.href);
  return true;
});

// ======== Services column data (from siteServicePages.ts) ========
//
// We only show services that have href and title.
// We'll present title text, and if you want a shorter label like "Electrolyzers"
// you can switch to service.shortLabel here.
//
const footerServices = servicePagesList
  .filter((svc) => !!svc.href && !!svc.title)
  .map((svc) => ({
    href: svc.href,
    label: svc.title,
  }));

const ORG_LOGO_RESOLVED = resolveLogoFromManifest({
  manifest,
  kind: "desktop",
  mode: "original",
});
---

<footer
  class="site-footer bg-primary-darker-x col-base-10 text-small py-2 px-1"
  itemscope
  itemtype="https://schema.org/WPFooter"
>
  <div class="footer-columns max-w-site w-100p mx-auto py-05 px-1 grid gap ta-start">
    {/* Column 1: Brand / copyright */}
    <div
      class="footer-col sm-hr"
      itemscope
      itemtype="https://schema.org/WebSite"
      itemid={`${siteUrl}#website`}
    >
      {/* url + name for the WebSite node */}
      <meta itemprop="url" content={siteUrl} />

      <a
        href={siteUrl}
        aria-label={`${siteName} — Home`}
        title={`${siteName} — Home`}
        class="inline-flex ai-center td-none br-r p-0 m-0 bg-primary-lighter-x relative lh-0 site-logo-chip-underline"
      >
        { siteImages.desktopLogo ? (
          <img
            src={ORG_LOGO_RESOLVED?.url}
            alt={desktopAlt}
            title={desktopAlt}
            class="h-60 w-auto"
            aria-hidden="true"
          />
        ) : (
          <span
            class="bold col-primary hover-col-base-100"
            itemprop="name"
          >
            {siteName}
          </span>
        )}
      </a>
      <p class="text-base">{siteTitle}</p>
      {location && (
          <div class="my-05 py-02 flex flex-row wrap ai-f-start gap-05">
            <IconMask name="map-pin" class="w-2-0" />
            <span class="inline-flex flex-1">{location}</span>
          </div>
        )}
      {siteDefaults.registrationId && <p class="py-05">{siteDefaults.registrationLabel}: {siteDefaults.registrationId}</p>}
      {siteDefaults.taxId && <p class="py-05">{siteDefaults.taxLabel}: {siteDefaults.taxId}</p>}
      <p class="py-05">&copy; {today.getFullYear()} {siteName}. All rights reserved.</p>
    </div>

    {/* Column 2: Services (dynamic from servicePagesList) */}
    <div class="footer-col sm-hr">
      <p class="bold uppercase">
        <Anchor href={rootOr(collections?.service?.base || 'services')}>
          Our Services
        </Anchor>
      </p>
      <ul class="no-bullets">
        {footerServices.map((svc) => (
          <li class="my-05 py-02">
            <Anchor href={svc.href}>{svc.label}</Anchor>
          </li>
        ))}
      </ul>
    </div>

    {/* Column 3: Main Pages / Explore */}
    <div class="footer-col sm-hr">
      <p class="bold uppercase">Explore</p>
      <ul class="no-bullets">
        {collectionLinks.map((link) => (
          <li class="my-05 py-02">
            <Anchor href={link.href}>{link.label}</Anchor>
          </li>
        ))}
      </ul>
    </div>

    {/* Column 4: Social + Contact */}
    <div class="footer-col sm-hr">
      <p class="bold uppercase">Connect with us</p>
      <SocialLink id="footer-social-links" />
      <ul class="no-bullets">
        {email && (
          <li class="my-05 py-02 flex flex-row wrap ai-center gap-05">
            <IconMask name="email" class="w-2-0" />
            <Anchor href={`mailto:${email}`} className="">
              {email}
            </Anchor>
          </li>
        )}
        {phone && (
          <li class="my-05 py-02 flex flex-row wrap ai-center gap-05">
            <IconMask name="phone" class="w-2-0" />
            <Anchor
              href={`tel:${phone.replace(/[^\d+]/g, '')}`}
              className=""
            >
              {phone}
            </Anchor>
          </li>
        )}
        {waHref && (
          <li class="my-05 py-02 flex flex-row wrap ai-center gap-05">
            <IconMask name="whatsapp" class="w-2-0" />
            <Anchor href={waHref} target="_blank" rel="noopener" className="">
              WhatsApp
            </Anchor>
          </li>
        )}
        
      </ul>
    </div>
  </div>

  {/* Lower nav row, typically legal / policy links */}
  <div class="footer-bottom py-1">
    <ul class="flex flex-row wrap gap no-bullets jc-center no-bullets list-separator">
      {pageLinks.map((link) => (
        <li class="my-05 py-02">
          <Anchor href={link.href} title={link.title}>
            {link.label}
          </Anchor>
        </li>
      ))}
    </ul>
  </div>

  {/* Bottom bar */}
  <div class="footer-bottom ta-center py-1 hr">
    <p class="text-small">
      Built with <Anchor href="https://astro.build">Astro</Anchor> • Theme by{" "}
      <Anchor href="https://nviewsweb.com">NViewsWEB</Anchor>.
    </p>
  </div>
</footer>
