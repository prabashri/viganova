---
// src/components/SocialLink.astro
import { Icon } from 'astro-icon/components';
import { siteDefaults } from '@/config/siteDefaults';

interface Props {
  id?: string;
  className?: string;
  itemClass?: string;
  iconSize?: string;
}

const {
  id = 'social-links',
  className = '',
  itemClass = '',
  iconSize = 'w-1-5 h-1-5'
} = Astro.props;

const links = siteDefaults.socialLinks as Record<string, string | undefined>;

// Simple email detector
const isEmail = (v: string) =>
  /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v);

// Normalize href based on key/value
function getHref(key: string, raw: string): string {
  const value = raw.trim();

  // If already fully-qualified (http/https/mailto), keep as-is
  if (/^(https?:|mailto:)/i.test(value)) return value;

  // Email: either key === 'email' or it looks like an email address
  if (key === 'email' || isEmail(value)) return `mailto:${value}`;

  // X/Twitter handle (with/without leading @)
  if (key === 'x') return `https://x.com/${value.replace(/^@/, '')}`;

  // Otherwise, assume it's a hostname or path and add https
  return `https://${value.replace(/^\/+/, '')}`;
}

// Accessible labels
function getAriaLabel(key: string, value: string): string {
  if (key === 'email' || isEmail(value)) return `Email us at ${value.replace(/^mailto:/, '')}`;
  const pretty = key.charAt(0).toUpperCase() + key.slice(1);
  return `Follow us on ${pretty}`;
}

// For mailto we usually avoid opening a new tab
function getTarget(href: string): string | undefined {
  return href.startsWith('mailto:') ? undefined : '_blank';
}
function getRel(href: string): string | undefined {
  return href.startsWith('mailto:') ? undefined : 'noopener noreferrer';
}
---

<nav aria-label="Social media links" id={id} class={`social-media-links flex wrap gap-05 mx-0ai-center ${className}`}>
  {Object.entries(links).map(([key, value]) => {
    if (!value) return null;

    const href = getHref(key, value);
    const label = getAriaLabel(key, value);
    const target = getTarget(href);
    const rel = getRel(href);

    return (
      <a
        href={href}
        {...(target ? { target } : {})}
        {...(rel ? { rel } : {})}
        aria-label={label}
        title={label}
        class={`icon-link flex ai-center jc-center p-02 br-r lh-0 focus-visible bg-primary-lighter-x ${itemClass}`}
      >
        <Icon name={key} class={iconSize} />
        <span class="sr-only">{label}</span>
      </a>
    );
  })}
</nav>
